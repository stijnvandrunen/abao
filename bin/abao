#!/usr/bin/env node

require('coffee-script/register')

var optimist = require('optimist');
var path = require('path');
var pjson = require('../package.json');
var Abao = require('../lib/abao');

var argv = optimist
    .usage("Usage: \n  abao <path to raml> <api_endpoint> [OPTIONS]" +
    "\n\nExample: \n  " + "abao ./api.raml http://api.example.com")
    .options(Abao.options)
    .wrap(80)
    .argv;

var argError = false;

if (argv.help === true) {
  optimist.showHelp(fn=console.error);
  process.exit(0);
}

if (argv.version === true) {
  console.log(pjson.version);
  process.exit(0);
}

if (argv.reporters === true) {
  // Copied from node_modules/mocha/_mocha
  console.log();
  console.log('    dot - dot matrix');
  console.log('    doc - html documentation');
  console.log('    spec - hierarchical spec list');
  console.log('    json - single json object');
  console.log('    progress - progress bar');
  console.log('    list - spec-style listing');
  console.log('    tap - test-anything-protocol');
  console.log('    landing - unicode landing strip');
  console.log('    xunit - xunit reporter');
  console.log('    html-cov - HTML test coverage');
  console.log('    json-cov - JSON test coverage');
  console.log('    min - minimal reporter (great with --watch)');
  console.log('    json-stream - newline delimited json events');
  console.log('    markdown - markdown documentation (github flavour)');
  console.log('    nyan - nyan cat!');
  console.log();
  process.exit(0);
}

if (argv._[0] === undefined) {
  console.error("Error: Must specify path to raml file.");
  argError = true;
}
if (argv._[1] === undefined && !argv.names && !argv['generate-hooks']) {
  console.error("Error: Must specify api endpoint.");
  argError = true;
}
if (argError) {
  console.error("\n");
  optimist.showHelp(fn=console.error);
  process.exit(1);
}

configuration = {
  'ramlPath': argv._[0],
  'server': argv._[1],
  'options': argv
};

abao = new Abao(configuration);

abao.run(function(error, failures){
  if (error) {
    if (error.message) {
      console.error(error.message);
    }
    if (error.stack) {
      console.error(error.stack);
    }
    process.exit(1);
  }
  if (failures > 0) {
    process.exit(1);
  } else {
    process.exit(0);
  }
});
